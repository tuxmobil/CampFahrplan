//
// get the installed SDK and build tools version
// based on: http://www.egeek.me/2013/12/07/gradle-auto-detect-android-sdk-and-build-tools-versions/
//
// modified by Ari Ayvazyan
// https://github.com/aayvazyan-tgm/autodetect_android_sdk_and_buildTools
import org.codehaus.groovy.runtime.StackTraceUtils


//use the newest SDK automatically if the given one is not available
//accessible via: project.getSDKIfPossible(21)
project.ext.set("getSDKIfPossible",
        {preferred ->
            return highestSdkAvailable(preferred)
        });
//Use the lastest BuildTool Version available, default to the given value on error
//accessible via: project.getHighestAvailableTools("21.1.2")
project.ext.set("getHighestAvailableTools",
        {preferred ->
            return latestBuildToolsAvailable(preferred)
        });

public String androidSDKDir() {
    def sdkDir = android.getSdkDirectory().toString()
    return sdkDir
}

public int[] sdksAvailable() {
    def sdks = new ByteArrayOutputStream()
    def androidSdkDir = androidSDKDir()
    exec {
        workingDir androidSdkDir + "/tools"
        if(isWindows()) {
            commandLine 'cmd', '/c','android', 'list'
        } else {
            commandLine './android', 'list'
        }
        standardOutput = sdks
    }
    sdks = sdks
    // get the output
            .toString()
    // split to strings
            .split('\n')
    // leave only strings with API levels
            .findAll { it ==~ /\s*API level:\s*(\d+).*/ }
    // extract the API levels
            .collect { (it =~ /\s*API level:\s*(\d+).*/)[0][1].toInteger() }
    // sort from highest to lowest
            .sort( { a, b -> b <=> a } )
    sdks
}

public int highestSdkAvailable(int preferredSdk) {
    try {
        def sdks = sdksAvailable()
        def highestSdk = sdks[0]
        if (highestSdk == null) {
            println "No installed SDKs found. Using default SDK " + preferredSdk
            return preferredSdk
        }else if(sdks.contains(preferredSdk)) {
            println "Preferred SDK found, using: " + preferredSdk
            return preferredSdk
        }else{
            println "Using latest found SDK " + highestSdk
            return highestSdk
        }
    } catch (any) {
        println "Exception while determining highest SDK. Using default SDK " +
                preferredSdk
        StackTraceUtils.sanitize(any).printStackTrace()
        preferredSdk
    }
}

public String[] buildToolsAvailable() {
    println "sdk dir: " + androidSDKDir()
    def buildToolsDir = new File(androidSDKDir(), "build-tools")
    buildToolsDir.list([accept:{d, f-> !f.contains("android") }] as FilenameFilter).sort { a, b -> b <=> a }
}

public String latestBuildToolsAvailable(String defaultBuildTools) {
    try {
        def buildToolsVersions = buildToolsAvailable()
        def latestBuildTools = buildToolsVersions[0]
        if (latestBuildTools != null) {
            println "Using latest found build tools " + latestBuildTools
            latestBuildTools
        } else {
            println "No installed build tools found. Using default build tools " +
                    defaultBuildTools
            defaultBuildTools
        }
    } catch (any) {
        println "Exception while determining latest build tools. Using default build tools " +
                defaultBuildTools
        StackTraceUtils.sanitize(any).printStackTrace()
        defaultBuildTools
    }
}

import org.apache.tools.ant.taskdefs.condition.Os
public boolean isWindows() {
    if (Os.isFamily(Os.FAMILY_WINDOWS)) {
        return true
    }
    return false
}